<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" 
	xmlns:core="http://www.mulesoft.org/schema/mule/core" 
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" 
	xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" 
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" 
	xmlns:siebel="http://www.mulesoft.org/schema/mule/siebel" 
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
    xmlns="http://www.mulesoft.org/schema/mule/core"
    xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
    xmlns:spring="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/siebel http://www.mulesoft.org/schema/mule/siebel/current/mule-siebel.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <batch:job name="syncContactsBatch" max-failed-records="1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
            <siebel:query-business-components config-ref="OracleSiebelBusinessObjects" businessObjectComponentType="Contact.Contact" doc:name="Oracle Siebel Business Objects" searchExpression="[Last Update - SDQ] &gt;= '${migration.startDate}'">
                <siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Id</siebel:fields-to-retrieve>
					 <siebel:fields-to-retrieve>Email Address</siebel:fields-to-retrieve>
					 <siebel:fields-to-retrieve>First Name</siebel:fields-to-retrieve>
					 <siebel:fields-to-retrieve>Last Name</siebel:fields-to-retrieve>
					 <siebel:fields-to-retrieve>Work Phone #</siebel:fields-to-retrieve>					 
					 <siebel:fields-to-retrieve>Home Phone #</siebel:fields-to-retrieve>
					 <siebel:fields-to-retrieve>Fax Phone #</siebel:fields-to-retrieve>					 
					 <siebel:fields-to-retrieve>Birth Date</siebel:fields-to-retrieve>
					 <siebel:fields-to-retrieve>Assistant</siebel:fields-to-retrieve>
					 <siebel:fields-to-retrieve>Account</siebel:fields-to-retrieve>
                </siebel:fields-to-retrieve>
            </siebel:query-business-components>

        </batch:input>
        <batch:process-records>
            <batch:step name="getContactInSalesforceStep">
                <enricher source="#[payload == null ? null : payload.Id]" target="#[payload.Id]" doc:name="Enrich payload with Id of target instance">
                    <sfdc:query-single config-ref="Salesforce" query="SELECT Id FROM Contact WHERE Email = '#[payload[&quot;Email Address&quot;]]'" doc:name="Query Salesforce for Contact"/>
                </enricher>
            </batch:step>
            <batch:step name="findAccountInSalesforceStep" accept-expression="payload.Account != ''">
                
                <enricher doc:name="store result in 'payload.AccountId'" source="#[payload == null ? null : payload.Id]" target="#[payload.AccountId]">
                    <sfdc:query-single config-ref="Salesforce" query="SELECT Id,Name from Account where Name = '#[payload.Account]'" doc:name="Query Salesforce for Account"/>

                </enricher>

            </batch:step>
            <batch:step name="createAccountInSfdcIfNecessaryStep" accept-expression="payload != null &amp;&amp;  payload.Account != '' &amp;&amp; payload.AccountId == null">
                <batch:commit size="200" doc:name="Batch Commit">
                	<flow-ref name="createAccountsFlow" doc:name="Call createAccountsFlow"/>
                </batch:commit>
            </batch:step>
            
            <batch:step name="upsertContactInSalesforceStep" accept-policy="ALL">
                <batch:commit doc:name="Batch Commit" size="${page.size}">
                    <dw:transform-message doc:name="Contact.Contact to Contact">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
	(Id            : $.Id) when $.Id != null,
	AccountId      : $.AccountId,
	Department     : $.Department,
	FirstName      : $."First Name",
	LastName       : $."Last Name",
	Email          : $."Email Address",
	Phone          : $."Work Phone #",
	HomePhone      : $."Home Phone #",
	Fax            : $."Fax Phone #",
	Birthdate      : $."Birth Date" as :date {format: "YYYY/MM/dd"}  unless ($."Birth Date" is :empty) otherwise null,
	AssistantName  : $.Assistant
}]]></dw:set-payload>
                    </dw:transform-message>
                    <sfdc:upsert config-ref="Salesforce" externalIdFieldName="Id" type="Contact" doc:name="Upsert Contact in Salesforce">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:upsert>
                    <logger message="After Upsert: #[payload]" level="INFO" doc:name="Log result"/>
                </batch:commit>
            </batch:step>

        </batch:process-records>
        <batch:on-complete>
            <flow-ref name="sendEmailLogResultFlow" doc:name="Call sendEmailLogResultFlow"/>

            
        </batch:on-complete>
    </batch:job>
    <flow name="mainFlow"  doc:description="This flow is the entry point to the Kick business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Template exposes to trigger it.

">
        <batch:execute name="syncContactsBatch" doc:name="execute syncContactsBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>
    <sub-flow name="createAccountsFlow" >
                <dw:transform-message doc:name="Transform payload to list of Account maps">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map
{
	Name: $.Account
}]]></dw:set-payload>
                </dw:transform-message>
        <sfdc:create config-ref="Salesforce" type="Account" doc:name="create Account in Salesforce Instance">
            <sfdc:objects ref="#[payload]"/>
        </sfdc:create>
        <foreach doc:name="For Each">
            <choice doc:name="Choice">
                <when expression="#[payload.success]">
                    <expression-component doc:name="Set the AccountId"><![CDATA[records[counter-1].payload['AccountId'] = payload.id]]></expression-component>
                </when>
                <otherwise>
                    <logger message="could not create account for record " doc:name="Log 'could not create account for record'"/>
                </otherwise>
            </choice>
        </foreach>
    </sub-flow>
    <sub-flow name="sendEmailLogResultFlow" >
        <scatter-gather doc:name="All">
            <processor-chain>
                <json:object-to-json-transformer doc:name="Transform BatchJobInstance to JSON"/>
                <logger message="Migration process has finished: #[payload]" level="INFO" doc:name="Log 'Migration process has finished'"/>
            </processor-chain>
            <processor-chain>
                <json:object-to-json-transformer doc:name="Transform BatchJobInstance to JSON"/>
                <smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" connector-ref="Gmail" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" doc:name="Send mail"/>
            </processor-chain>
        </scatter-gather>
    </sub-flow>
</mule>
